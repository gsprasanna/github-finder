{"version":3,"sources":["assets/images/loading.gif","Constants/ServerUrls.js","Services/fetchData.js","Components/LoadingIndicator.js","Components/Githubrepos.js","Components/UserProfile.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PRIMARY_SERVER","fetchData","route","requestUrl","Promise","resolve","reject","fetch","then","response","json","data","catch","error","LoadingIndicator","src","require","alt","GithubRepos","repos","dataTable","length","map","item","repoName","href","html_url","target","name","repoUrl","keyField","columns","dataField","text","pagination","paginationFactory","UserProfile","followers","avatarUrl","userDetails","className","Image","height","roundedCircle","items","login","style","color","strings","typeSpeed","backSpeed","loop","App","state","searchText","redirect","followersUrl","reposUrl","searchDetails","event","setState","value","onSearchSubmit","getUserDetails","a","total_count","followers_url","repos_url","avatar_url","getFollowersCount","getReposDetails","console","url","replace","followersDetails","reposDetails","this","size","InputGroup","Prepend","Text","id","FormControl","placeholder","aria-label","aria-describedby","onChange","Button","variant","onClick","Component","withRouter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e0a14773.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.81c29bc5.gif\";","export const PRIMARY_SERVER = \"https://api.github.com\";\n\nexport const GET_USER = \"/search/users?q=\";\n","import { PRIMARY_SERVER } from \"../Constants/ServerUrls\";\n\nconst fetchData = (route) => {\n  const requestUrl = PRIMARY_SERVER + route;\n\n  return new Promise((resolve, reject) => {\n    fetch(requestUrl)\n      .then((response) => response.json())\n      .then((data) => {\n        resolve(data);\n      })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n};\n\nexport default fetchData;\n","import React from \"react\";\n\nconst LoadingIndicator = () => {\n  return (\n    <div>\n      <img src={require(\"../assets/images/loading.gif\")} alt={\"loading\"} />\n    </div>\n  );\n};\n\nexport default LoadingIndicator;\n","import BootstrapTable from \"react-bootstrap-table-next\";\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\nimport * as ReactBootstrap from \"react-bootstrap\";\nimport React from \"react\";\nimport LoadingIndicator from \"./LoadingIndicator\";\n\nconst GithubRepos = ({ repos }) => {\n  const dataTable =\n    repos.length > 0 ? (\n      repos.map((item) => {\n        return {\n          repoName: (\n            <a href={item.html_url} target=\"_blank\">\n              {item.name}\n            </a>\n          ),\n          repoUrl: item.html_url,\n        };\n      })\n    ) : (\n      <LoadingIndicator />\n    );\n  const columns = [{ dataField: \"repoName\", text: \"Repositories\" }];\n  return (\n    <BootstrapTable\n      keyField=\"repoName\"\n      data={dataTable}\n      columns={columns}\n      pagination={paginationFactory()}\n    />\n  );\n};\n\nexport default GithubRepos;\n","import React, { Component } from \"react\";\nimport { Image } from \"react-bootstrap\";\nimport Typed from \"react-typed\";\nconst UserProfile = ({ followers, avatarUrl, userDetails }) => {\n  debugger;\n  return (\n    <div className=\"App\">\n      <div className=\"flex-container\">\n        <div className=\"flex-image\">\n          <Image src={avatarUrl} height=\"200px\" roundedCircle />\n        </div>\n        <div className=\"flex-content\">\n          {userDetails.items ? (\n            <h2 className=\"username\">{userDetails.items[0].login}</h2>\n          ) : (\n            \"\"\n          )}\n          {followers >= 0 ? (\n            <h5 style={{ color: \"green\" }}>\n              <Typed\n                strings={[followers + \"followers\"]}\n                typeSpeed={40}\n                backSpeed={90}\n                loop\n              />\n            </h5>\n          ) : (\n            \"\"\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UserProfile;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport fetchData from \"./Services/fetchData\";\nimport { GET_USER, PRIMARY_SERVER } from \"./Constants/ServerUrls\";\nimport GithubRepos from \"./Components/Githubrepos\";\nimport { FaGithubSquare } from \"react-icons/fa\";\nimport { withRouter } from \"react-router-dom\";\nimport LoadingIndicator from \"./Components/LoadingIndicator\";\nimport UserProfile from \"./Components/UserProfile\";\nimport { Button, InputGroup, FormControl } from \"react-bootstrap\";\nclass App extends Component {\n  state = {\n    searchText: \"\",\n    userDetails: {},\n    followers: -1,\n    repos: [],\n    redirect: false,\n    followersUrl: \"\",\n    reposUrl: \"\",\n    avatarUrl: \"\",\n  };\n  searchDetails = (event) => {\n    this.setState({\n      searchText: event.target.value,\n    });\n  };\n  onSearchSubmit = () => {\n    if (this.state.searchText != \"\") {\n      this.getUserDetails();\n    }\n  };\n  getUserDetails = async () => {\n    const { searchText } = this.state;\n    try {\n      const userDetails = await fetchData(GET_USER + searchText, \"GET\");\n      debugger;\n      this.setState({ userDetails: userDetails });\n      if (userDetails.total_count) {\n        const followersUrl = userDetails.items[0].followers_url;\n        const reposUrl = userDetails.items[0].repos_url;\n        const avatarUrl = userDetails.items[0].avatar_url;\n        this.setState({\n          followersUrl: followersUrl,\n          reposUrl: reposUrl,\n          avatarUrl: avatarUrl,\n        });\n        this.getFollowersCount(followersUrl);\n        this.getReposDetails(reposUrl);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    this.setState({\n      searchText: \"\",\n    });\n  };\n\n  getFollowersCount = async (url) => {\n    try {\n      const followersUrl = url.replace(PRIMARY_SERVER, \"\");\n      const followersDetails = await fetchData(followersUrl, \"GET\");\n      this.setState({ followers: followersDetails.length });\n    } catch (e) {\n      console.error(e);\n    }\n  };\n  getReposDetails = async (url) => {\n    try {\n      const reposUrl = url.replace(PRIMARY_SERVER, \"\");\n      const reposDetails = await fetchData(reposUrl, \"GET\");\n      this.setState({ repos: reposDetails });\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  render() {\n    const {\n      searchText,\n      followers,\n      repos,\n      followersUrl,\n      avatarUrl,\n      userDetails,\n    } = this.state;\n    return (\n      <div className=\"container\">\n        <h1 className=\"App\">\n          <FaGithubSquare className=\"github-icon\" size={50} />\n          <span>Finder</span>\n        </h1>\n        <div className=\"App\">\n          <InputGroup className=\"mb-3\">\n            <InputGroup.Prepend>\n              <InputGroup.Text id=\"basic-addon1\">@</InputGroup.Text>\n            </InputGroup.Prepend>\n            <FormControl\n              placeholder=\"Username\"\n              aria-label=\"Username\"\n              aria-describedby=\"basic-addon1\"\n              onChange={this.searchDetails}\n              value={searchText}\n            />\n          </InputGroup>\n          <Button variant=\"info\" onClick={this.onSearchSubmit}>\n            {\"Search\"}\n          </Button>\n        </div>\n        <div className=\"mt-5\">\n          {followers >= 0 ? (\n            <UserProfile\n              followers={followers}\n              avatarUrl={avatarUrl}\n              userDetails={userDetails}\n            />\n          ) : (\n            \"\"\n          )}\n        </div>\n        <div className=\"m-4\">\n          {repos.length > 0 ? (\n            <GithubRepos repos={repos} />\n          ) : followersUrl != \"\" ? (\n            <h4 className=\"App\">No Repositories Found!</h4>\n          ) : (\n            \"\"\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport \"react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}